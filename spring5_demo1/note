Spring框架概述
    1.Spring是轻量级的开源的JavaEE框架
    2.Spring可以解决企业应用开发的复杂性
    3.Spring有两个核心部分：IOC和Aop
        1.IOC：控制反转，传统的创建对象方式是使用new的方式，IOC的方式是把创建对象的过程交给Spring进行管理
        2.Aop：面向切面，不修改源代码进行功能增强
    4.Spring相关特点
        1.方便解耦，简化开发。
        2.Aop编程支持
        3.方便程序的测试
        4.方便集成各种优秀框架
        5.降低Java API使用难度
        6.方便进行事物操作

在spring jar包中每个jar都有三个分别是jar包、Java文档和Java源代码
此demo只用到了Bean、Core、Context、Expression基础jar包

1.IOC(概念和原理)
    1.什么是IOC
        1.控制反转：把对象的创建和对象之间的调用过程，交给Spring进行管理
        2.使用IOC目的：降低耦合度
    2.IOC底层原理
        1.所用技术：xml解析、工厂模式（设计模式）、反射
        2.IOC过程
            1.xml配置文件，配置创建的对象
                <bean id="user" class="com.xiaoxu.spring5.User"/>
            2.创建工厂类
            public class UserFactory {
                public static User getUser() {
                    //解析xml文件获取bean标签下的class内容--获取类路径
                    String classValue = ....;//解析bean
                    //获取User类的字节码文件
                    Class cla = Class.forName(classValue);
                    //通过反射创建对象
                    return (User)cla.newInstance();
                }
            }
        3.IOC(接口)
            1.IOC思想基于IOC容器完成，IOC容器底层就是对象工厂。
            2.Spring提供IOC容器实现两种方式（两个接口）
                1.BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供给开发人员进行使用
                    该接口在加载配置文件时不会创建对象，只有在获取（使用）对象时才会创建对象。
                2.ApplicationContext：它是BeanFactor接口的子接口，提供更强大的功能，一般由开发人员进行使用
                    该接口在加载配置文件时就会创建所有配置的对象，
                *在项目中一般使用ApplicationContext。在项目启动时就执行该接口，创建所有需要使用的类
                3.ApplicationContext接口的实现类
                    1.FileSystemXmlApplicationContext()
                        xml配置文件绝对路径
                    1.ClassPathXmlApplicationContext()
                        xml配置文件相对于classpath的路径
        4.IOC操作Bean管理
        Bean管理值得是两个操作：
            1.Spring创建对象
            2.Spring注入属性
        Bean管理操作有两种方式
            1.基于xml配置文件方式实现
            创建对象：
                <bean id="user" class="com.xiaoxu.spring5.User"/>
                id属性：唯一标识，在使用ApplicationContext接口对象获取bean的时候就是值用id号获取
                class属性，类全路径
                *此种方式在创建对象时，默认执行无参构造方法。（如果实体类中没有定义无参构造方法，则会抛异常）
            注入属性（DI）：
                1.在<bean></bean>标签内使用<property name="propertyName" value="value"/>标签实现类属性以及值的注入
                    此方式相当于调用实体类中的setter方法进行属性值设置
                2.在<bean></bean>标签内使用<constructor-arg name="name" value="value"/>实现类属性值注入(根据属性名称注入)
                    在<bean></bean>标签内使用<constructor-arg index="index" value="value"/>实现类属性值注入(根据属性索引注入)
                    此方法就是调用实体类的有参构造方法进行属性值设置
                3.设置空属性值
                    在<property name=""> <null/></property>
                4.设置特殊符号值
                    使用转义符、使用CDATA结构<property name=""> <value><![CDATA[value]]></value></property>
                5.外部bean注入方式
                    比如
                    public class UserService {
                        private UserDao userDao;
                        public void add() {
                            userDao.add();
                        }
                    }
                    想要使用xml配置Bean的方式对userDao 进行注入
                    使用<property name="name" ref="beanId"/>
                6.内部bean注入方式
                    <property name="name"><bean id="" class=""><property></property></bean></property>
                7.集合类型属性注入
                    1.数组类型属性注入
                        <property name=""><array><value></value><value></value><value></value>...</array></property>
                    2.list类型属性注入
                        <property name=""><list><value></value><value></value><value></value>...</list></property>
                        如果list的类型是对象，那么<value>标签换成<ref bean="beanId">就行了
                    3.map类型属性注入
                        <property name=""><map><entry key="" value=""></entry><entry key="" value=""></entry><entry key="" value=""></entry>...</map></property>
                    4.set类型属性注入
                        <property name=""><set><value></value><value></value><value></value>...</set></property>

            2.基于注解方式实现
        IOC操作 Bean管理（FactoryBean）
            1.Spring有两种类型bean，一种普通bean，另一种工厂bean（FactoryBean)
            2.普通bean：在配置文件中定义的bean类型就是返回类型。
            3.工厂bean：在配置文件中定义的bean类型可以和返回类型不一样
            将特定的工厂类实现FactoryBean<T>接口即可返回自己想要的类型对象
        IOC操作 Bean管理（Bean作用域）
            1.在Spring中可以设置创建的bean实例是单实例还是多实例
            2.在Spring中bean默认是单实例
            3.设置bean单实例还是多实例
                使用scope属性
                    1.singleton--单实例
                    2.prototype--多实例
                    区别：1.当scope属性为singleton时，在加载spring配置文件时就会创建单实例对象
                        2.当scope属性值为prototype时，在加载spring配置文件时不会创建实例对象，而是在获取（使用）bean时才创建实例对象，而且每次创建的对象都是不同的对象
                    3.request：每次创建的对象都会被放入request域中（不常用）
                    4.session：每次创建的对象都会被放入session域中（不常用）
        IOC操作 Bean管理（Bean生命周期）
            1.声明周期：从对象创建到对象销毁的过程
            2.Bean生命周期
                1.通过构造器创建Bean实例
                2.为Bean的属性注入值和对其他bean的引用（调用setter的方式）
                3.调用Bean的初始化方法，在<bean>标签内使用init-method属性
                4.获取Bean对象
                5.当容器关闭时，调用Bean的销毁方法，在<bean>标签内使用destroy-method配置（这个地方需要手动调用一下close方法）
            3.Bean的后置处理器，Bean生命周期有七步
                1.通过构造器创建Bean实例
                2.为Bean的属性注入值和对其他bean的引用（调用setter的方式）
                3.把Bean实例传递给Bean后置处理器的方法postProcessBeforeInitialization
                4.调用Bean的初始化方法，在<bean>标签内使用init-method属性
                5.把Bean实例传递给Bean后置处理器的方法postProcessAfterInitialization
                6.获取Bean对象
                7.当容器关闭时，调用Bean的销毁方法，在<bean>标签内使用destroy-method配置（这个地方需要手动调用一下close方法）
        IOC操作 Bean管理（xml自动装配）
            1.根据指定装配规则（属性名还是属性类型），Spring自动将匹配的属性值进行注入
                就是在<bean>标签内不需要使用<property>等标签进行属性注入了，直接使用autowire属性进行配置自动注入的方式
            2.自动注入方式有两种，
                1.根据名称进行自动装配
                    autowire="byName"   只要实体类属性名称跟bean id名称相同即可自动装配
                2.根据类型进行自动装配
                    autowire="byType"   根据实体类属性类型自动寻找bean的类型进行自动装配
            并不常用，xml方式都不常用，注解才是最常用的
        xml终于结束
        IOC操作 Bean管理（基于注解方式）
            Spring针对Bean管理中创建对象提供的注解
                1.@Component
                2.@Service
                3.@Controller
                4.@Repository
                这四个注解功能是一样的，都可以用来创建bean实例，分为四个不同的名称是为了日常开发时能够更好的区分那些类具有哪些职能。
            基于注解方式实现对象创建
                1.引入spring-aop依赖
                2.开启包扫描
                    在xml配置文件中声明context命名空间（xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/beans/spring-context.xsd")
                    配置<context:component-scan base-package="需要扫描的包路径"></context:component-scan>
                    如果需要扫描多个包可以在base-package属性中使用逗号隔开
                3.在类上添加注解（四个注解用哪个都行）
            基于注解方式实现属性注入：
                1.@Autowired：根据属性类型进行自动装配
                2.@Qulifier：根据属性名称进行注入
                    需要跟@Autowired配合使用，当某个接口有多个实现类时，直接使用@Autowired不知道要具体注入哪一个实现类，这时可以使用@Qualifier进行指定
                3.@Resourse：可以根据属性类型，也可以根据名称进行注入
                    不使用属性name就是根据类型注入，使用name属性就是根据名称注入
                4.@Value：注入普通类型属性
2.AOP
    1.面向切面编程，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。
    2.通俗的讲，不通过修改源代码的方式，在主干功能里面添加新功能。
AOP底层原理
    AOP底层使用动态代理
       1.有接口情况使用JDK动态代理
       2.没有接口情况，使用CGLIB动态代理
AOP（JDK动态代理）
    1.使用JDK动态代理，使用Proxy类里面的方式创建代理对象
        1.使用newProxyInstance(ClassLoader loader,Class<?>[] interfaces, InvocationHandler h);
        此方法有三个参数：
            1.类加载器；
            2.增强方法所在的类，这个类实现的接口，支持多个接口
            3.实现这个接口InvocationHandler，创建代理对象，写增强的方法。(这个接口中有一个invoke方法，这个接口会增强所有的方法，)
AOP(术语)
    1.连接点
        类中可以被增强的方法就叫做连接点
    2.切入点
        类中实际真正被增强的方法，成为切入点
    3.通知（增强）
        实际增强的逻辑部分就叫通知
        通知有多种类型：
        1.前置通知、
            @Before("execution()")
        2.后置通知、
            @After("execution()")有无异常都会通知，也叫最终通知

            @AfterReturning()有异常就不通知
        3.环绕通知、
            @Around("execution()")
            可以使用参数的方式执行切入点(ProceedingJoinPoint point) point.proceed();
        4.异常通知、
            @AfterThrowing()
        5.最终通知
    4.切面
        是一个动作，把通知应用到切入点的过程就叫做切面
AOP 操作
    1.Spring框架中一般都是基于AspectJ实现AOP操作
    *AspectJ不是Spring组成部分，是一个单独的AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作
    2.基于AspectJ实现AOP操作
        1.基于xml配置文件方式实现
        2.基于注解方式实现
    3.切入点表达式
        1.切入点表达式作用：知道对哪个类里面的哪个方法进行增强
        2.语法结构
        execution([权限修饰符(*表示所有)][返回类型][全类名][方法名称]([参数列表])
        例子：
        增强com.atguigu.spring.dao.UserDao.add进行增强
        execution(* com.atguigu.spring.dao.UserDao.add(...))
        增强com.atguigu.spring.dao.UserDao中的所有方法进行增强
        增强com.atguigu.spring.dao包中的所有类、所有方法进行增强
        execution(* com.atguigu.spring.dao.*.*(..))
    4.抽取相同切入点
        @Pointcut(value="execution(* com.xiaoxu.spring5.aop.User.add(..)")
        public void pointDemo(){}
    5.有多个增强类对同一个方法进行增强，设置增强类优先级
        在增强类上面添加注解@Order(数字类型值),数字类型值越小优先级越高
    **AspectJ完全注解开发，在config类上添加@EnableAspectJAutoProxy()即可

JDBCTemplate
    Spring框架对JDBC进行封装，使用JDBCTemplate方便实现对数据库操作
    一般的插入修改删除操作都可以使用jdbcTemplate.update()执行
    查询某个对象操作使用queryForObject(sql, new BeanPropertyRowMapper<Object>(Object.class),args)
    查询列表使用query(sql, new BeanPropertyRowMapper<Object>(Object.class)
    批量添加操作使用batchUpdate(sql, List<Object[]> args)
事物
    事物是数据库操作最基本的单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败
事物四个特性(ACID)：
    1.原子性
    2.一致性
    3.隔离性
    4.持久性
spring事务管理
    有两种方式：编程式事务管理和声明式事务管理
    声明式事务管理：
        1.基于注解方式
        2.基于xml配置文件方式
在spring进行声明式事务管理，底层使用AOP原理
spring事务管理API
    提供一个接口，代表事物管理器，这个接口针对不同的框架提供不同的实现类（接口:PlatformTransactionManager)
事务操作
    1.在spring配置文件中创建事务管理器
    2.在spring配置文件中开启事务注解
    3.在service类上面（或者service类中的方法上）添加事务注解
        1.@Transactional,这个注解添加到类上面，也可以添加到方法上面
        2.如果把这个注解添加到类上面，这个类里面所有的方法都添加事物
        3.如果把这个注解添加到方法上面，则只为这个方法添加事务
声明式事物管理参数配置
    1.在@Transactional注解中可以进行参数配置
        1.propagation   事物传播行为
            多个事务之间相互调用（比如一个方法有事务调用另一个没有事务的方法，一个没有事务的方法调用另一个有事务的方法，或者两个事务方法相互调用）
            eg:
            @Transactional
            public void add() {}
            public void update() {}

            Spring框架事务传播行为有7种
                1.REQUIRED(如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行)
                    如果add方法本身有事务，调用update方法之后，update使用当前add方法里面的事务，如果add方法本身没有事务，调用update方法之后，创建新事务
                2.REQUIRED_NEW(当前的方法必须启动新事务，并在他自己的事务内运行，如果有事务正在运行，应该将它挂起)
                3.SUPPORTS(如果有食物在运行，当前的方法就在这个十五内运行，否则他不可以运行在事务中)
                4.NOT_SUPPORTED(当前的方法不应该运行在事务中，如果有运行的事务，将它挂起)
                5.MANDATORY(当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常)
                6.NEVER(当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常)
                7.NESTED(如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在他自己的事务内运行)
        2.isolation     事物隔离级别
            1.多事务操作之间不会产生影响。不考虑隔离性会产生很多问题
            2.有三个读问题，脏读、不可重复读、虚读（幻读）
                脏读：一个未提交事务读取到另一个未提交事务的数据
                不可重复读：一个未提交事务读取到另一个已提交事务修改的数据
                虚读：一个未提交事务读取到另一个已提交事务添加的数据
            spring中有四种隔离级别参数
                1.READ UNCOMMITTED      读未提交(不能解决脏读、不可重复读、幻读)
                2.READ COMMITTED        读已提交(能解决脏读，不能解决不可重复读、幻读)
                3.REPEATABLE READ       可重复读(能解决脏读、不可重复读，不能解决幻读) 默认
                4.SERIALIZABLE          串行化(都能解决)
        3.timeout       超时时间    (默认值-1,表示不超时)
        4.readOnly      是否只读    (读：查询操作，写：增删改,默认值false)
        5.rollbackFor      回滚    (设置出现哪些异常进行事务回滚)
        6.noRollback    不回滚     (设置出现哪些异常不进行事务回滚)
完全注解方式
    创建配置类

Spring5框架新功能
    1.整个Spring5框架的代码基于Java8，运行时兼容jdk9，许多不建议使用的类和方法在代码库中删除
    2.Spring5框架自带了通用的日志封装
        1.Spring5已经移除Log4jConfigListener，官方建议使用Log4j2
        2.Spring5框架整合Log4j2
        第一步引入jar包
                    <dependency>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-api</artifactId>
                        <version>2.11.2</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-core</artifactId>
                        <version>2.11.2</version>
                    </dependency>
                    <dependency>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-slf4j-impl</artifactId>
                        <version>2.11.2</version>
                    </dependency>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-api</artifactId>
                        <version>1.7.30</version>
                    </dependency>
        第二步配置
            <?xml version="1.0" encoding="UTF-8" ?>
            <!--日志级别以及优先级排序：OFF>FATAL>ERROR>WARN>INFO>DEBUG>TRACE>ALL-->
            <!--configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出-->
            <configuration status="INFO">
                <!--    自定义所有的appender-->
                <appenders>
                <!--        输出日志信息到控制台-->
                <console name="Console" target="SYSTEM_OUT">
                    <!--            控制日志输出的格式-->
                    <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger[36] - %msg%n"/>
                </console>
                </appenders>
            <!--    然后定义logger，只有定义了logger并引入appender，appender才会生效-->
                <!--    root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出-->
                <loggers>
                    <root level="info">
                        <appender-ref ref="Console"/>
                    </root>
                </loggers>
            </configuration>
            可以直接使用private static final Logger log = LoggerFactory.getLogger(LogTest.class);
            来手动输出日志
        3.Spring5框架核心容器支持@Nullable注解
            @Nullable注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空
        4.Spring5核心容器支持函数式风格GenericApplicationContext
            通过GenericApplicationContext这个对象注册想要Spring进行管理的bean，然后再获取。。。。
            GenericApplicationContext context = new GenericApplicationContext();
            context.refresh();
            Object o = (Object)context.getBean("object", Object.class, () -> new Object());
            pass...
        5.Spring5支持整合JUnit5
            可以使用一个复合注解@SpringJUnitConfig(location="classpath:config.xml")
SpringWebflux
    1.SpringWebflux是Spring5添加的新的模块，用于web开发，功能和SpringMVC类似，但Webflux使用当前一种比较流行的响应式编程。
    2.使用传统的web框架，比如SpringMVC，这些基于Servlet容器，Webflux是一种异步非阻塞的框架，异步非阻塞的框架在Servlet3.1之后才支持，核心是基于Reactor的相关API实现的。
    3.异步非阻塞：
        异步和同步针对调用者：
            1.同步：调用者发送请求，发送请求之后必须等待对方回应才能进行下一步操作
            2.异步：调用者发送请求，发送请求之后不需要等待对方回应才能进行下一步操作
        阻塞和非阻塞针对被调用者：
            1.被调用者收到请求之后，做完请求任务之后才给出反馈就是阻塞，
            2.收到请求之后妈上给出反馈然后再去做事情就是非阻塞
    Webflux特点
        1.非阻塞式，可以在有限的资源下提升系统的吞吐量和伸缩性
        2.函数式编程：Spring5框架就是基于Java8，Webflux能够使用Java8的函数式编程的方式实现路由请求
    与SpringMVC的比较
        1.都可以使用注解方式，都运行在Tomcat容器中。
        2.SpringMVC使用命令式编程，Webflux使用异步响应式编程
    响应式编程：
        1.响应式编程是一种面向数据流和变化传播的编程凡是。这意味着可以在编程语言中很方便的表达静态或动态的数据流；而且相关的计算模型会自动将变化的值通过数据流进行传播。
        2.Java8之前使用的观察者模式是继承Observable
        3.Java8之后使用的观察者模式是Flow
    响应式编程（Reactor实现）
        1.响应式编程操作中，Reactor是满足Reactive规范框架
        2.Reactor有两个核心类，Mono和Flux，这两个类实现接口Publisher，提供了丰富的操作符。Flux对象实现发布者，返回N个元素；Mono实现发布者，返回0或1个元素。
        3.Flux和Mono都是数据流的发布者，使用Flux和Mono都可以发出三种数据信号：元素值、错误信号、完成信号。错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束了，错误信号终止数据流同时把错误信息传递给订阅者。
        4.三种信号特点
            1.错误信号和完成信号都是终止信号，不能共存。
            2.如果没有发送任何元素值，而是直接发送错误或者完成信号，表示是空数据流。
            3.如果没有错误信号，没有完成信号，表示是无线数据流。
        5.调用just或者其他方法只是声明数据流，数据流并没有发出，只有进行订阅之后才会触发数据流，不订阅什么都不会发生。可以使用.subscribe()进行订阅
        6.操作符
            对数据流进行一道道的操作，称为操作符
            两个最常见的操作符：
            1.map   将元素映射为新元素
            2.flatMap   将元素映射为流 ->把多个元素转为流再把多个流转成一个大的流，最后返回这个大的流
SpringWebflux执行流程和和核心api
    SpringWebflux基于Reactor，默认使用的容器是Netty，Netty是高性能的NIO框架，异步非阻塞的框架
    SpringWebflux执行过程和SpringMVC相似，SpringWebflux核心控制器DispatchHandler，实现了接口WebHandler，该接口有一个方法Mono<void> handle(ServerWebExchange var);
        该方法的执行过程为，接收http请求，如果不为空则根据请求地址获取对应mapping，然后调用具体的业务方法，最后返回处理结果
    SpringWebflux中的DispatcherHandler，负责请求的处理
        HandlerMapping: 请求查询到处理的方法
        HandlerAdapter: 真正负责请求处理
        HandlerResultHandler:响应结果处理
SpringWebflux实现函数式编程，实现了两个接口：RouterFunction（路由处理）和HandlerFunction（处理函数）
SpringWebflux（基于注解编程模型）
    SpringWebflux实现方式有两种，注解编程模型和函数式编程模型。
    使用注解编程模型方式和之前SpringMVC使用是相似的，只需要把相关依赖配置到项目中，SpringBoot自动配置相关运行容器，默认情况下使用Netty作为服务器
    说明：
        SpringMVC使用的是同步阻塞的方式，是基于SpringMVC+Servlet+Tomcat实现的
        SpringWebflux使用的是异步非阻塞方式，是基于SpringWebflux+Reactor+Netty实现的
SpringWebflux（基于函数时编程模型）
    1.在使用函数式编程模型操作的时候，需要自己初始化服务器
    2.基于函数式编程模型时，有两个核心接口：RouterFunction（实现路由功能，将请求转发给对应的handler）和HandlerFunction（处理请求生成相应的函数），核心任务时定义两个函数式接口的实现并且启动需要的服务器。
    3.SpringWebflux请求和响应不再是ServletRequest和ServletResponse而是ServerRequest和ServerResponse
